# sgemm_common_128x32

-:-:-:-:00 LDS.U.128 j0Ay0, [readAs + 4x<0*128 + 00 + 0*8>];
-:-:-:-:00 LDS.U.128 j0Bx0, [readBs + 4x<0*32  + 00 + 0*8>];
-:-:-:-:00 LDS.U.128 j0Ay4, [readAs + 4x<0*128 + 64 + 0*8>];
-:-:-:-:00 LDS.U.128 j1Ay0, [readAs + 4x<1*128 + 00 + 0*8>];
-:-:-:-:00 LDS.U.128 j1Bx0, [readBs + 4x<1*32  + 00 + 0*8>];
-:-:-:-:00 LDS.U.128 j1Ay4, [readAs + 4x<1*128 + 64 + 0*8>];

LOOP:

<CODE>

    our @top;
    our %insert;
    our $shiftAX;
    our $shiftBX;

    my @cOrder;
    my @swirl = ([0,2],[1,2],[1,0],[0,0]);
    my @y = (0,1,4,5);
    foreach my $x (0,2)
    {
        foreach my $y (@y)
        {
            push @cOrder, [$x + $_->[0], $y + $_->[1]] foreach @swirl;
        }
        @y = reverse @y;
    }

    my $out = join '', @top;
    
    foreach my $j (0 .. 15)
    {
        my $barrier   = $j & 1 ? 2 : 1;
        my $rsPred    = $j >= 14 ? '@P0' : '   ';
        my $loadReg   = ($j + 2) & 3;
        my $shareLine = ($j + 2) & 15;
        my $shiftA    = $shiftAX ? $shareLine >> 2 : 0;
        my $shiftB    = $shiftBX ? $shareLine >> 2 : 0;
        my $compute   = $j & 3;


        $insert{"j${j}c0"} = sprintf "--:-:%d:-:1  %s LDS.U.128 j%dAy0, [readAs + 4x<%d*128 + 00 + %d*8>];\n", $barrier, $rsPred, $loadReg, $shareLine, $shiftA;
        $insert{"j${j}c2"} = sprintf "--:-:%d:-:1  %s LDS.U.128 j%dBx0, [readBs + 4x<%d*32  + 00 + %d*8>];\n", $barrier, $rsPred, $loadReg, $shareLine, $shiftB;
        $insert{"j${j}c4"} = sprintf "--:-:%d:-:1  %s LDS.U.128 j%dAy4, [readAs + 4x<%d*128 + 64 + %d*8>];\n", $barrier, $rsPred, $loadReg, $shareLine, $shiftA;

        foreach my $c (0 .. 31)
        {
            my ($x,$y) = @{$cOrder[$c]};

            my $ins    = $insert{"j${j}c$c"} || '';

            my $wait   = $c == 0 ? "0$barrier" : '--';

            my $stall  = (split "\n", $ins)[0] =~ /LDS|F2F|I2I|LDG|STS|BAR|BRA/ ? 0 : 1;

            my $yield  = $c == 16 && $stall ? 'Y' : '-';

            my $ctrl   = "$wait:-:-:$yield:$stall";

            $out .= sprintf "%s FFMA cx%dy%d, j%dBx%d, j%dAy%d, cx%dy%d;\n%s", $ctrl,  $x,$y,  $compute,$x,  $compute,$y,  $x,$y,  $ins;
        }
    }
    return $out;

</CODE>

<SCHEDULE_BLOCK>

-:-:-:-:00 MOV alpha, param_alpha;
-:-:-:-:00 MOV beta,  param_beta;
-:-:-:-:00 MOV flags, param_flags;

// writeCs = (readAs / 4) * 32 + readBs;
-:-:-:-:00 ISETP.GT.AND P0, PT, swapBuf, RZ, PT;
-:-:-:-:00 IADD readBs,  readBs, -4x<szShareA>;
-:-:-:-:00 @P0 IADD readAs,  readAs, -swapBuf;
-:-:-:-:00 @P0 IADD readBs,  readBs, -swapBuf;
-:-:-:-:00 ISCADD  writeCs, readAs, readBs, 3;

// readCs = ((tid & 96) << 2) | (tid & 31)   << 2;
-:-:-:-:00 LOP.AND tid31, tid, 31;
-:-:-:-:00 LOP.AND tid96, tid, 96;
-:-:-:-:00 ISCADD readCs, tid96, tid31, 2;
-:-:-:-:00 SHL    readCs, readCs, 2;

// cx = blkB*32 + tid31;
-:-:-:-:00 ISCADD cx, blkB, tid31, 5;

// cy = blkA*128 + (tid96 >> 1)
-:-:-:-:00 SHR.U32 cy00, tid96, 1;
-:-:-:-:00 ISCADD  cy00, blkA, cy00, 7;

// C += (cy*ldc + cx) * 4;
// C += (ldcz*blockZ + ldc*cy + cx00) * 4;
-:-:-:-:00 MOV  ldc,  param_ldc;
-:-:-:-:00 MOV  ldcz, param_ldcz;
-:-:-:-:00 XMAD.LO  ci, ldc,  cy00, cx, xmad_c;
-:-:-:-:00 XMAD.LO2 ci, ldcz, blkZ, ci;
-:-:-:-:00 LEA      C00y0.CC, ci, param_C[0],     2;
-:-:-:-:00 LEA.HI.X C00y1,    ci, param_C[1], RZ, 2;

// Apply relu
-:-:-:-:00 LOP.AND.NZ   P4, RZ, flags, 2;
// cx < n
-:-:-:-:00 ISETP.LT.AND P6, PT, cx, param_n, PT;
// beta != 0
-:-:-:-:00 ISETP.NE.AND P5, PT, beta, RZ, P6; 

-:-:-:-:00 SHL ldc1, ldc, 2;
-:-:-:-:00 SHL ldc4, ldc, 4;
-:-:-:-:00 ISCADD ldc60, ldc, -ldc4, 8;

-:-:-:-:00 IADD   C04y0.CC, C00y0, ldc4;
-:-:-:-:00 MOV d0, RZ;
-:-:-:-:00 IADD   cy04, cy00,  4;
-:-:-:-:00 IADD.X C04y1,    C00y1, RZ;
-:-:-:-:00 IADD   C08y0.CC, C04y0, ldc4;
-:-:-:-:00 MOV d1, RZ;
-:-:-:-:00 IADD   cy08, cy00,  8;
-:-:-:-:00 IADD.X C08y1,    C04y1, RZ;
-:-:-:-:00 IADD   C12y0.CC, C08y0, ldc4;
-:-:-:-:00 MOV d2, RZ;
-:-:-:-:00 MOV d3, RZ;
-:-:-:-:00 IADD   cy12, cy00,  12;
-:-:-:-:00 IADD.X C12y1,    C08y1, RZ;

-:-:-:-:00 BAR.SYNC 0;

<CODE>

    my $out;
    foreach my $y (0..7)
    {
        $out .=
            "-:-:-:-:00 IADD   C00y0.CC, C00y0, ldc60;\n" .
            "-:-:-:-:00 IADD   cy00,     cy00,  60;\n" .
            "-:-:-:-:00 IADD.X C00y1,    C00y1, RZ;\n" .
            "-:-:-:-:00 IADD   C04y0.CC, C04y0, ldc60;\n" .
            "-:-:-:-:00 IADD   cy04,     cy04,  60;\n" .
            "-:-:-:-:00 IADD.X C04y1,    C04y1, RZ;\n" .
            "-:-:-:-:00 IADD   C08y0.CC, C08y0, ldc60;\n" .
            "-:-:-:-:00 IADD   cy08,     cy08,  60;\n" .
            "-:-:-:-:00 IADD.X C08y1,    C08y1, RZ;\n" .
            "-:-:-:-:00 IADD   C12y0.CC, C12y0, ldc60;\n" .
            "-:-:-:-:00 IADD   cy12,     cy12,  60;\n" .
            "-:-:-:-:00 IADD.X C12y1,    C12y1, RZ;\n\n"  if $y == 4;

        $out .= sprintf(
            "-:-:-:-:00 FMUL c0, cx0y%d, alpha;\n" .
            "-:-:-:-:00 FMUL c1, cx1y%d, alpha;\n" .
            "-:-:-:-:00 FMUL c2, cx2y%d, alpha;\n" .
            "-:-:-:-:00 FMUL c3, cx3y%d, alpha;\n",
            ($y) x 4);

        $out .= "-:-:-:-:00 CAL STORE_C;\n\n";
    }
    return $out;

</CODE>

-:-:-:-:00 EXIT;

STORE_C:

-:-:-:-:00 ISETP.LT.AND P0, PT, cy00, param_m, P5;
-:-:-:-:00 ISETP.LT.AND P1, PT, cy04, param_m, P5;
-:-:-:-:00 ISETP.LT.AND P2, PT, cy08, param_m, P5;
-:-:-:-:00 ISETP.LT.AND P3, PT, cy12, param_m, P5;

-:-:-:-:00 @P0 LDG.E d0, [C00y];
-:-:-:-:00 @P1 LDG.E d1, [C04y];
-:-:-:-:00 @P2 LDG.E d2, [C08y];
-:-:-:-:00 @P3 LDG.E d3, [C12y];
-:-:-:-:00 @!P0 MOV d0, RZ;
-:-:-:-:00 @!P1 MOV d1, RZ;
-:-:-:-:00 @!P2 MOV d2, RZ;
-:-:-:-:00 @!P3 MOV d3, RZ;

-:-:-:-:00 ISETP.LT.AND P0, PT, cy00, param_m, P6;
-:-:-:-:00 ISETP.LT.AND P1, PT, cy04, param_m, P6;
-:-:-:-:00 ISETP.LT.AND P2, PT, cy08, param_m, P6;
-:-:-:-:00 ISETP.LT.AND P3, PT, cy12, param_m, P6;

-:-:-:-:00 IADD cy00, cy00, 1;
-:-:-:-:00 IADD cy04, cy04, 1;
-:-:-:-:00 IADD cy08, cy08, 1;
-:-:-:-:00 IADD cy12, cy12, 1;

-:-:-:-:00 @P4 FMNMX c0, c0, RZ, !PT;
-:-:-:-:00 @P4 FMNMX c1, c1, RZ, !PT;
-:-:-:-:00 @P4 FMNMX c2, c2, RZ, !PT;
-:-:-:-:00 @P4 FMNMX c3, c3, RZ, !PT;

-:-:-:-:00 STS.128 [writeCs], c0;
-:-:-:-:00 LDS c0, [readCs + 4x<0*32>];
-:-:-:-:00 LDS c1, [readCs + 4x<1*32>];
-:-:-:-:00 LDS c2, [readCs + 4x<2*32>];
-:-:-:-:00 LDS c3, [readCs + 4x<3*32>];

-:-:-:-:00 @P5 FFMA c0, d0, beta, c0;
-:-:-:-:00 @P5 FFMA c1, d1, beta, c1;
-:-:-:-:00 @P5 FFMA c2, d2, beta, c2;
-:-:-:-:00 @P5 FFMA c3, d3, beta, c3;

-:-:-:-:00 @P0 STG.E.CG [C00y], c0;
-:-:-:-:00 @P1 STG.E.CG [C04y], c1;
-:-:-:-:00 @P2 STG.E.CG [C08y], c2;
-:-:-:-:00 @P3 STG.E.CG [C12y], c3;

-:-:-:-:00 IADD   C00y0.CC, C00y0, ldc1;
-:-:-:-:00 IADD.X C00y1,    C00y1, RZ;
-:-:-:-:00 IADD   C04y0.CC, C04y0, ldc1;
-:-:-:-:00 IADD.X C04y1,    C04y1, RZ;
-:-:-:-:00 IADD   C08y0.CC, C08y0, ldc1;
-:-:-:-:00 IADD.X C08y1,    C08y1, RZ;
-:-:-:-:00 IADD   C12y0.CC, C12y0, ldc1;
-:-:-:-:00 IADD.X C12y1,    C12y1, RZ;
-:-:-:-:00 RET;
